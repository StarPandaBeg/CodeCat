{% extends 'base/two-column.jinja' %}
{% from 'macro/chip.jinja' import chip %}
{% from 'macro/wrapper.jinja' import wrap %}
{% from 'macro/block.jinja' import block, block_title, block_row %}
{% from 'macro/spoiler.jinja' import spoiler %}
{% from 'macro/copyable.jinja' import copyable %}

{% block column_a %}
<div class="problem-view">
  <div class="problem-view__title">
    <h1>А. Монокарп и множество</h1>
    <p>ограничение по времени на тест: 2 секунды</p>
    <p>ограничение по памяти на тест: 256 мегабайт</p>
  </div>
  {% call spoiler("Текст задачи") %}
  <span class="problem-view__problem">
    <p>
      У Монокарпа есть $$$n$$$ чисел $$$1,2,…,n$$$ и множество (изначально пустое). Он $$$n$$$ раз добавляет свои числа
      в это
      множество в
      некотором порядке. Во время каждого шага он добавляет новое число (которого ранее не было в множестве). Другими
      словами, последовательность добавленных чисел является перестановкой длины $$$n$$$.
    </p>
    <br />
    <p>
      Каждый раз, когда Монокарп добавляет элемент в множество, кроме первого раза, он записывает символ:
    <ul>
      <li>если элемент, который Монокарп пытается добавить, становится максимальным элементом в множестве, Монокарп
        записывает
        символ >;
      </li>
      <li>если элемент, который Монокарп пытается добавить, становится минимальным элементом в множестве, Монокарп
        записывает
        символ <; </li>
      <li>если ни одно из вышеперечисленного не выполняется, Монокарп записывает символ ?.</li>
    </ul>
    </p>
    <br />
    <p>
      Дана строка $$$s$$$ из $$$n-1$$$ символов, которая представляет записанные символы Монокарпом (в порядке их
      записи).
      Вам
      нужно
      обработать $$$m$$$ запросов к строке. Каждый запрос имеет следующий формат:

    <ul>
      <li>
        $$$i$$$ $$$c$$$ — заменить $$$s_i$$$ символом $$$c$$$.
      </li>
    </ul>
    </p>
    <br />
    <p>
      Перед всеми запросами и после каждого запроса вам нужно вычислить количество различных способов упорядочить числа
      $$$1, 2, 3, \dots, n$$$ таким образом, что если Монокарп вставляет числа в множество в этом порядке, он получает
      строку $$$s$$$. Поскольку ответы могут быть большими, выведите их по модулю $$$998244353$$$.
    </p>
  </span>
  {% endcall %}
  {% call spoiler("Данные") %}
  <div class="problem-view__data">
    <h2>Входные данные</h2>
    <p>
      Первая строка содержит два целых числа $$$n$$$ и $$$m$$$ ($$$2 \le n \le 3 \cdot 10^5$$$; $$$1 \le m \le 3 \cdot
      10^5$$$).

      Вторая строка содержит строку $$$s$$$, состоящую из ровно $$$n-1$$$ символов <,> и/или ?.

        Затем следуют $$$m$$$ строк. Каждая из них представляет запрос. Каждая строка содержит целое число $$$i$$$ и
        символ $$$c$$$ ($$$1 \le i \le n-1$$$; $$$c$$$ может быть <,>, или ?).
    </p>
  </div>
  <div class="problem-view__data">
    <h2>Выходные данные</h2>
    <p>
      Перед всеми запросами и после каждого запроса выведите одно целое число — количество способов упорядочить числа
      $$$1, 2, 3, \dots, n$$$ таким образом, чтобы, если Монокарп вставляет числа в множество в этом порядке, он
      получает строку $$$s$$$. Поскольку ответы могут быть большими, выведите их по модулю $$$998244353$$$.
    </p>
  </div>
  {% endcall %}
  {% call spoiler("Примеры") %}

  <div class="example">
    <div class="example__block">
      {% call copyable("Входные данные") %}123
      123{% endcall %}
    </div>
    <div class="example__block">
      {% call copyable("Выходные данные") %}123
      123{% endcall %}
    </div>
  </div>
  <div class="example">
    <div class="example__block">
      {% call copyable("Входные данные") %}123
      123{% endcall %}
    </div>
    <div class="example__block">
      {% call copyable("Выходные данные") %}123
      123{% endcall %}
    </div>
  </div>
  <p class="example-description">123</p>

  {% endcall %}
  {% call spoiler("Решения") %}
  <div class="solution tex2jax_ignore">
    <div class="solution_block">
      {% call copyable("cpp", True, "cpp") %}#include &lt;iostream&gt;
      using namespace std;

      int main() {
      cout << "Hello World!" ; return 0; } {% endcall %} <div class="solution__description">
        123</div>
  </div>
</div>
<div class="solution tex2jax_ignore">
  <div class="solution_block">
    {% call copyable("cpp", True, "cpp") %}#include &lt;iostream&gt;
    using namespace std;

    int main() {
    cout << "Hello World!" ; return 0; } {% endcall %} <div class="solution__description">
      123</div>
</div>
</div>

{% endcall %}
</div>
{% endblock %}

{% block column_b %}
{% call block() %}
{{ block_title("Тренировочный полигон (алгоритмика)", "/contests/1") }}
{% call block_row() %}
<p><b>Статус:</b> <span class="status">не начато</span></p>
{% endcall %}
{% call block_row() %}
<p>{{chip("Комбинаторика")}}</p>
{% endcall %}
{% endcall %}
{% endblock %}

{% block style %}
{{ super() }}
<style>
  .problem-view .problem-view__title {
    padding-bottom: 10px;
    width: 100%;
    text-align: center;
  }

  .problem-view .problem-view__title h1 {
    padding-bottom: 10px;
    font-weight: 400;
    font-size: 1.3rem;
  }

  .problem-view .problem-view__title p {
    font-size: .9rem;
    opacity: .75;
  }

  .problem-view .problem-view__problem {
    font-size: .9rem;
    opacity: .75;
  }

  .problem-view .problem-view__problem ul {
    list-style-position: inside;
  }

  .problem-view .problem-view__problem ul li {
    padding: 5px 0;
  }

  .problem-view .problem-view__problem ul li:first-child {
    padding-top: 10px;
  }

  .problem-view .problem-view__data {
    padding: 5px 0;
    font-size: .9rem;
    opacity: .75;
  }

  .problem-view .problem-view__data h2 {
    padding: 5px 0;
    font-size: 1rem;
    opacity: 1;
  }

  .problem-view .example .example__block:not(:first-child) {
    padding-top: 5px;
  }

  .problem-view .example:not(:first-child) {
    padding-top: 20px;
  }

  .problem-view .example-description {
    padding-top: 20px;
  }

  .status.solved {
    color: rgb(19, 122, 19);
    font-weight: 500;
  }

  .status.failed {
    color: rgb(145, 16, 16);
    font-weight: 500;
  }
</style>
{% endblock %}